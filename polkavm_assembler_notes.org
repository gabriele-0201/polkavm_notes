* polkavm_assembler
** REX Prefix
REX prefixes are instruction-prefix bytes used in 64-bit mode


** Reg
There is an enum representing all the register (one per variant)
*** is_reg_preserved
page 23 https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf

just divide preserved registers from which are not

*** things about rex and modrm (TODO)
*** impl_regs!
this macro just implements 4 methods for each register, where each method returns the name of the corresponding 'sub-register' with the specified number of bits
#+begin_src rust
name(self) -> &'static str
name32(self) -> &'static str
name16(self) -> &'static str
name8(self) -> &'static str
#+end_src



** Imm (TODO: ?)

Immediate value???

#+begin_src rust
enum Imm {
    Imm8(i8),
    Imm32(i32),
}

impl Imm {
    // This method let me think how Imm is just an abstraction of an Immediate
    // value that can be inserted directly in the instruction

    // it does not follow a varint encoding (as in risc-v) but simply it
    // is inserted in memory following little endian (if I'm not stupid)
    const fn append_into(self, enc: EncInst) -> EncInst {
        match self {
            Imm::Imm8(value) => enc.append(value as u8),
            Imm::Imm32(value) => {
                let xs = value.to_le_bytes();
                enc.append_array([xs[0], xs[1], xs[2], xs[3]])

                // why not?
                enc.append_array(value.to_le_bytes());
            }
        }
    }
}
#+end_src


** trait Instruction

the trait `Instruction` is very simple, and it is present in the `polkavm_assembler` crate
#+begin_src rust
pub trait Instruction: Copy + core::fmt::Display {
    fn encode(self) -> EncInst;
    fn target_fixup(self) -> Option<(Label, u8, u8)>; // (TODO: WHAT IS THAT?!?!?!)
}
#+end_src

** Inst

Structure representing x86 instructions
#+begin_src rust
struct Inst {
    override_op_size: bool,
    override_addr_size: bool,
    op_alt: bool,
    enable_modrm: bool,
    rex: u8,
    opcode: u8,
    modrm: u8,
    sib: u8,
    imm: Option<Imm>,
}
#+end_src

*** + multiple methods to construct valid instructions
every function is `const` (lol)

** mod inst
How instructions are represented?

each x86 instruction (or more complex things maybe, not only pure instructions are reported? I'm not sure) is abstracted by a struct (carrying some const encoding) and the implementation of the trait `Instruction`

*** alu_imm(size: RegSize, reg: Reg, imm: i32, opext: u8) -> EncInst

This function SEEMS to construct an Encoded Instruction (`EncInst`) from all the required things (regs, imm and opcode)


*** impl_inst!

500 lines instructions (I can't learn what each of this functions does)

But what the macro does?

#+begin_src rust
// macro body
(|$self:ident, $fmt:ident| $($name:ident($($arg:ty),*) => $body:expr, ($fmt_body:expr),)+) => {
    $(
        #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        // struct created for each instruction
        pub struct $name($(pub $arg),*);
        impl $name {
            // const encoding of the instruction based on the arguments
            const fn encode_const($self) -> EncInst {
                $body
            }
        }

        impl core::fmt::Display for $name {
            // implementation of the Display
            fn fmt(&$self, $fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
                $fmt_body
            }
        }

        // This is just the implementation of the trait used by Assembler
        impl crate::Instruction for $name {
            fn encode(self) -> EncInst {
                self.encode_const()
            }

            // (TODO: BOH)
            fn target_fixup(self) -> Option<(Label, u8, u8)> {
                None
            }
        }

        #[cfg(test)]
        impl super::tests::GenerateTestValues for $name {
            fn generate_test_values(mut cb: impl FnMut(Self)) {
                impl_inst!(@generate_test_values cb, $name, $($arg),*);
            }
        }
    )+
};


// example of usage
impl_inst! { |self, fmt|
    // this is the name of the instruction
    ud2() =>
        // this is the body of the encode_const function
        EncInst::from_array([0x0f, 0x0b]),
        // this is the body of the fmt function
        (fmt.write_str("ud2")),
}
#+end_src

**** generate_test_values (TODO, skip tests for now :-0 )


*** Manually implemented Instruction
there are other instructions, like: jmp_label8, jmp_label32, call_label32, jcc_label8 and jcc_label32

those instructions are not in the macro because they have an implementation in the `target_fixup` method (all other instruction returns None)

#+begin_src rust
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub struct jmp_label32(pub Label);
impl jmp_label32 {
    // implementation of a const function, used later to encode the instruction
    const fn encode_const(self) -> EncInst {
        // here there is a subsequest call to another const encoding instruction
        jmp_rel32(0).encode_const() // (REUSE of already defined instruction)
    }
}

impl core::fmt::Display for jmp_label32 {
    fn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::fmt::Result {
        fmt.write_fmt(core::format_args!("jmp {}", self.0))
    }
}

impl crate::Instruction for jmp_label32 {
    // implemetation of the trait using const encoding
    fn encode(self) -> EncInst {
        self.encode_const()
    }

    // (TODO: BOH)
    fn target_fixup(self) -> Option<(Label, u8, u8)> {
        Some((self.0, 1, 4))
    }
}
#+end_src


** Assembler
   #+begin_src rust
   pub struct Assembler {
       origin: u64, // WHAT?! (TODO)
       code: Vec<u8>,  // Should be the container of the compiled code? (TODO)
       labels: Vec<usize>, // BOH (TODO)
       fixups: Vec<Fixup>, // BOH (TODO)
   }
   #+end_src
*** forward_declare_label
this method just create a `Label` with `usize::MAX` (a label is a transparent wrapper to usize)

*** push(inst: impl Instruction)

1. get the encoded instruction
2. `add_fixup_if_necessary` (TODO: WHAT?)
3. extend the `code` vec with the just created slice

** enum Condition
just abstraction over conditions like 'ne', 'le' etc.

** enum LoadKind and StoreKind
(TODO: not sure what those are)

** Label

#+begin_src rust
#[repr(transparent)]
pub struct Label(usize);
#+end_src

Where label are used?
1. In the `Compiler::new` there are three labels that are defined like that:
   #+begin_src rust
   let ecall_label = asm.forward_declare_label();
   let trap_label = asm.forward_declare_label();
   let trace_label = asm.forward_declare_label();
   #+end_src
2. `forward_declare_label` just create incremental labels and push in the `labels` Vec in the Assembler struct just an usize::MAX

   #+begin_src rust
   pub fn forward_declare_label(&mut self) -> Label {
       let label = self.labels.len();
       self.labels.push(usize::MAX);
       Label(label)
   }
   #+end_src

3. Now the compiler struct has this three fields and the values are something like : 0, 1 and 2
4. then they seems to be never used UNTIL the method `Compiler::finalize` is called!!! where "various trampolines are emitted" (WHAT?!)
5. inside `emit_trap_trampoline`
   the first line is: `self.define_label(self.trap_label);` (where self.trap_label should be 1)
6. `Compiler::define_label(Label)`
   it just call `Assembler::define_label(Label)`
7. `Assembler::define_label`
   #+begin_src rust
   pub fn define_label(&mut self, label: Label) -> &mut Self {
       // That's why `forward_declare_label` pushed usize::MAX in the Vec
       assert_eq!(self.labels[label.0], usize::MAX, "tried to redefine an already defined label");
       // make the label to point to the current end of the instruction,
       // so that the `emit_trap_trampoline` will push all the instructions to 'implement' the trap trampoline
       self.labels[label.0] = self.code.len();
       self
   }
   #+end_src

   The same thing happens when is called when  `emit_ecall_trampoline`

*** TRAMPOLINES
those are pieces of code that connects the host with the guest

trace, trap and ecall has similar (if not identical, beside the actual code pushed into the assembler) implementation
1. use pre-defined label
2. associate to the label the length of the code
3. push in the code more instructions that implement the label

**** trace_trampoline (only if trace_execution enabled)
**** trap_trampoline
glue to manage trap and returning safely into the host

#+begin_src rust
self.save_registers_to_vmctx();
self.push(load64_imm(TMP_REG, VM_ADDR_SYSCALL));
self.push(load32_imm(rdi, SYSCALL_TRAP));
self.push(jmp_reg(TMP_REG));
#+end_src
**** ecall_trampoline

#+begin_src rust
self.push(push(TMP_REG)); // Save the ecall number.
self.save_registers_to_vmctx();
self.push(load64_imm(TMP_REG, VM_ADDR_SYSCALL));
self.push(load32_imm(rdi, SYSCALL_HOSTCALL));
self.push(pop(rsi)); // Pop the ecall number as an argument.
self.push(call_reg(TMP_REG));
self.restore_registers_from_vmctx();
self.push(ret());
#+end_src

**** export_trampolines

this implementation a lot different from the previous one, the first thing to notice is that a new "trampoline" is added for EACH export, how?
#+begin_src rust
for export in self.exports {
    log::trace!("Emitting trampoline: export: '{}'", export.prototype().name());

    // this function just create a new incremental Lable associating to the label the
    // current size of the code (binary)
    let trampoline_label = self.asm.create_label();
    // inserting in a field of the Compiler a connection between the address of an exports
    // and the index of the Label
    self.export_to_label.insert(export.address(), trampoline_label);
    // WHAT!?!?! (TODO)
    self.restore_registers_from_vmctx();

    // WHAT!?!?! (TODO)
    let target_label = self.get_or_forward_declare_label(export.address());
    self.push(jmp_label32(target_label));
}
#+end_src

**** emit_sysreturn

Almost identical to the first three, just the lable wasn't already created and made by `create_label`

#+begin_src rust
self.save_registers_to_vmctx();
self.push(load64_imm(TMP_REG, VM_ADDR_SYSCALL));
self.push(load32_imm(rdi, SYSCALL_RETURN));
self.push(jmp_reg(TMP_REG));
#+end_src



** EncInst

EncodedInstruction(?)

#+begin_src rust
#[repr(align(8))]
pub struct EncInst {
    bytes: [u8; 15], // max length of an instruction is 15 bytes?
    length: u8,
}
#+end_src

*** from_array<const N: usize>(array: [u8; N])
just move the array into and `EncInst struct`
**** Problem: if N >= 15 it would panic at runtime
`panicked at 'index out of bounds: the len is N but the index is N',`
*** append_array<const N: usize>(mut self, array: [u8; N])
here though is present an assertion `assert!(p + N < 16);` to make sure the code doesn't panic


