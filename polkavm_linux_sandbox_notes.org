* polkavm_linux_sandbox

** SandboxProgramInit

struct that stores some initial information for the SandboxProgram

#+begin_src rust
pub struct SandboxProgramInit<'a> {
    // This struct contain some blocks of the code
    // + ro_data (reference to the slice in memory)
    // + rw_data (reference to the slice in memory)
    // + bss_size
    // + stack_size
    guest_init: GuestProgramInit<'a>,
    code: &'a [u8],
    jump_table: &'a [u8],
    sysreturn_address: u64,
}
#+end_src
#+begin_src rust
pub struct SandboxProgram {
    memfd: Fd,
    memory_config: SandboxMemoryConfig,
    sysreturn_address: u64,
}
#+end_src

** SandboxMemoryConfig

present in zygote.rs

#+begin_src rust
pub struct SandboxMemoryConfig {
    // this field contain the referecent to
    // ro_data, rw_data, bss_size and stack_size
    guest_config: GuestMemoryConfig,
    code_size: u32,
    jump_table_size: u32,
}
#+end_src

** SandboxProgram

#+begin_src rust
pub struct SandboxProgram {
    // owned file descriptor, implemented in polkavm_linux_raw
    memfd: Fd,
    // Information about memory
    memory_config: SandboxMemoryConfig,
    sysreturn_address: u64,
}
#+end_src

*** new(SandboxProgramInit)

1. get the native_page_size
2. using the SandboxProgramInit argument the SandboxMemoryConfig is created
3. Call to `prepare_sealed_memfd` where the arguments are:
   + name of the fd
   + total size (ro_data + rw_data + code + jump_table)
   + a closure that append all the just linked segments into a buffer
4. that's it, just memory config + write the polkavm_blob into ad fd, wrap those things and return the SandboxProgram object


** get_native_page_size

REALLY interesting

but the function is liked at runtime? YUP, glibc is linked at runtime by the dynamic linker (ld in linux), all the elf files that uses dynamic libraries

#+begin_src rust
fn get_native_page_size() -> usize {
    // This is literally the only thing we need from `libc`, so instead of including
    // the whole crate let's just define these ourselves.

    const _SC_PAGESIZE: c_int = 30;
    extern "C" {
        fn sysconf(name: c_int) -> c_long;
    }

    unsafe { sysconf(_SC_PAGESIZE) as usize }
}
#+end_src

** prepare_sealed_memfd(name: &core::ffi::CStr, length: usize, populate: impl FnOnce(&mut [u8])

1. create a new fd
2. truncte to the correct size
3. create an MMAP object and attach an the fd
4. populate the fd using the passed closure
5. unmap the map
6. check on the unmap results, there are weird behaviours in multithreading
