** How `ecalli` are translated to `syscall`?

Am I wrong or syscall in x86 cause an interrupt to switch in kernel mode? then the IDT is used to undertand which interrupt is and fetch from the stack(?) the number of the system call? how this is solved?

the instruction 'syscall' seems to not be used but another thing is done

#+begin_src rust
fn ecalli(&mut self, imm: u32) -> Self::ReturnTy {
    self.push(load32_imm(TMP_REG, imm));
    self.push(call_label32(self.ecall_label));

    Ok(())
}
#+end_src

-> here could be the response: `emit_ecall_trampoline`

** Labels and Trampolines

Why and What!?!?!? -> OK, more or less I understood lables and what trampolines are (not perfectly what each trampoline does)

** Different fields in the `Compiler` struct
+ pc_to_label
+ pc_to_label_pending

Is PC = program counter? if yes then the map pc_to_label then doesn't make any sense because the PC in the risc-v instruction is used to point to the exports, this menans that in the export the address is the i-th instruction? and not a byte address? -> I'm confused by this

+ max_jump_target
+ jump_table

  Those I have a feeling of knowing what they are BUT still not 100% sure:
+ export_to_label
+ export_trampolines

And finally:
  + regs_are_64bit
currently it is all 32 bit BUT MHHH not sure about the difference....

** Where is specified the C extension (Compressed Instruction) for the compilation of the guest program? polkatool link does this?

** Inside the trampolines to export function

Why before calling the export function the state of the registers are restored from the virtual context?

** WHERE the fuck are the generate_import/export_assembly??

After cargo expand the code is NOT visible
